{"version":3,"sources":["routes/Detail.js","components/Movie.js","routes/Home.js","App.js","index.js"],"names":["Detail","useState","loading","setLoading","movie","setMovie","id","useParams","getMovie","useCallback","a","fetch","json","data","useEffect","src","medium_cover_image","alt","title","description_intro","language","rating","year","Movie","coverImg","summary","genres","to","map","g","index","Home","movies","setMovies","getMovies","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAqCeA,MAlCf,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACQC,EAAOC,cAAPD,GACFE,EAAWC,sBAAW,sBAAC,4BAAAC,EAAA,sEAEnBC,MAAM,qDAAD,OAAsDL,IAFxC,8BAGzBM,OAHyB,OACrBA,EADqB,OAI3BP,EAASO,EAAKC,KAAKT,OACnBD,GAAW,GALgB,2CAM1B,CAACG,IAMJ,OAJAQ,qBAAU,WACRN,MACC,CAACA,IAGF,8BACGN,EACC,4CAEA,gCACE,qBAAKa,IAAKX,EAAMY,mBAAoBC,IAAKb,EAAMc,QAC/C,6BAAKd,EAAMc,QACX,4BAAId,EAAMe,oBACV,2CAAcf,EAAMgB,YACpB,yCAAYhB,EAAMiB,UAClB,uCAAUjB,EAAMkB,cCFXC,MAzBf,YAA0D,IAAzCjB,EAAwC,EAAxCA,GAAIkB,EAAoC,EAApCA,SAAUN,EAA0B,EAA1BA,MAAOO,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC7C,OACE,gCACE,qBAAKX,IAAKS,EAAUP,IAAKC,IACzB,6BACE,cAAC,IAAD,CAAMS,GAAE,iBAAYrB,GAApB,SAA2BY,MAE7B,4BAAIO,IACJ,6BACGC,EAAOE,KAAI,SAACC,EAAGC,GAAJ,OACV,6BAAiBD,GAARC,YC2BJC,MArCf,WACE,MAA8B9B,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAO+B,EAAP,KAAeC,EAAf,KACMC,EAAS,uCAAG,4BAAAxB,EAAA,sEAERC,MAAM,0EAFE,8BAKdC,OALc,OACVA,EADU,OAMhBqB,EAAUrB,EAAKC,KAAKmB,QACpB7B,GAAW,GAPK,2CAAH,qDAYf,OAHAW,qBAAU,WACRoB,MACC,IAED,8BACGhC,EACC,4CAEA,8BACG8B,EAAOJ,KAAI,SAACxB,GAAD,OACV,cAAC,EAAD,CAEEE,GAAIF,EAAME,GACVkB,SAAUpB,EAAMY,mBAChBE,MAAOd,EAAMc,MACbO,QAASrB,EAAMqB,QACfC,OAAQtB,EAAMsB,QALTtB,EAAME,YCNV6B,MAjBf,WAGE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,YCTVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.489caede.chunk.js","sourcesContent":["//useparams는 react router의 변수 값을 넘겨줌.\nimport { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nfunction Detail() {\n  const [loading, setLoading] = useState(true);\n  const [movie, setMovie] = useState([]);\n  const { id } = useParams();\n  const getMovie = useCallback(async () => {\n    const json = await (\n      await fetch(`https://yts.mx/api/v2/movie_details.json?movie_id=${id}`)\n    ).json();\n    setMovie(json.data.movie);\n    setLoading(false);\n  }, [id]);\n\n  useEffect(() => {\n    getMovie();\n  }, [getMovie]);\n\n  return (\n    <div>\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <div>\n          <img src={movie.medium_cover_image} alt={movie.title} />\n          <h1>{movie.title}</h1>\n          <p>{movie.description_intro}</p>\n          <p>language: {movie.language}</p>\n          <p>Rating: {movie.rating}</p>\n          <p>Date: {movie.year}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Detail;\n","import PropTypes from 'prop-types';\n//Link는 브라우저 새로고침 없이도 유저를 다른 페이지로 이동 시켜주는 컴포넌트.\nimport { Link } from 'react-router-dom';\nfunction Movie({ id, coverImg, title, summary, genres }) {\n  return (\n    <div>\n      <img src={coverImg} alt={title} />\n      <h2>\n        <Link to={`/movie/${id}`}>{title}</Link>\n      </h2>\n      <p>{summary}</p>\n      <ul>\n        {genres.map((g, index) => (\n          <li key={index}>{g}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  coverImg: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import { useEffect, useState } from 'react';\nimport Movie from '../components/Movie';\n\nfunction Home() {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const getMovies = async () => {\n    const json = await (\n      await fetch(\n        `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.8&sort_by=year`\n      )\n    ).json();\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n  useEffect(() => {\n    getMovies();\n  }, []);\n  return (\n    <div>\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <div>\n          {movies.map((movie) => (\n            <Movie\n              key={movie.id}\n              id={movie.id}\n              coverImg={movie.medium_cover_image}\n              title={movie.title}\n              summary={movie.summary}\n              genres={movie.genres}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Detail from './routes/Detail';\nimport Home from './routes/Home';\nfunction App() {\n  //switch는 route를 찾아서 컴포넌트를 렌더링 .\n  //한번에 하나의 route만 렌더링 하기 위해서 switch 씀.\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/movie/:id\">\n          <Detail />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}